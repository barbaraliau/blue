<!-- views/projects/project.ejs -->
<html>
<head>
  <title>Blue Projects</title>
  <meta charset = "UTF-8" />
  <script type = "text/javascript" src="/js/jquery-2.1.3.min.js"></script>
  <script type = "text/javascript" src="/js/jquery-ui.js"></script>
  <script type = "text/javascript" src="/js/bootstrap.min.js"></script>
  <script type = "text/javascript" src="/js/bootstrap-editable.min.js"></script>
</head>
<body>
<% include ../header %>
  <% include ./boards/index %>

  <script src="/js/jquery.sortable.js"></script>
  <script>

    //console.log("board-column > ul: ", $('.board-column > ul'));
    $(function() {
      if (typeof($('.board-column > ul')) !== 'undefined') {
        //console.log("board-column > ul: ", $('.board-column > ul'));
        $('.board-column > ul').sortable({
          connectWith: '.connected',
          dropOnEmpty: true,
        });
      };
    });
    $('ul.sortable').sortable({
      dropOnEmpty: true,
      forcePlaceholderSize: true,
    });
    $('.sortable').sortable({
      items: 'li' ,
      forcePlaceholderSize: true,
      dropOnEmpty: true
    });
    $('.sortable').sortable().bind('sortupdate', function(err, ui) {
      if (this === ui.item.parent()[0]) {
        /*
          This event is triggered when the user stopped sorting and the DOM position has changed.
          ui.item contains the current dragged element.
          ui.item.index() contains the new index of the dragged element
          ui.oldindex contains the old index of the dragged element
          ui.startparent contains the element that the dragged item comes from
          ui.endparent contains the element that the dragged item was added to
        */
        console.log("UI: ", ui);
        console.log("parent node id (target column):" + ui.item[0].parentNode.id); // Where the card is moving to
        console.log("item id:" + ui.item[0].id);
        console.log("project: " + ui.item[0].childNodes[0].ownerDocument.title);
        //console.log("board name: ", $(this).closest('.row').find('.inputQty'));
        console.log("board name: ", $('li[role="tab"].ui-tabs-active a').text());

        var order = $('ul.sortable li').map(function(){
          console.log($(this).data("id"));
          return $(this).data("id");
        }).get();

        // Should be a patch instead of post
        $.ajax({
          type: "POST",
          //url: "{{ URL::route('chapter.departmentSort', $chapter->slug) }}",
          url: "/card/move",
          dataType: "json",
          data: {cardId: ui.item[0].id, newColumnId: ui.item[0].parentNode.id, boardName: $('li[role="tab"].ui-tabs-active a').text()},
          success: function(order){
            console.log("Order: ", order);
          }
        });
      };
    });

    // setting defaults for the editable
    $.fn.editable.defaults.mode = 'inline';
    $.fn.editable.defaults.showbuttons = false;
    $.fn.editable.defaults.url = '/post';
    $.fn.editable.defaults.type = 'text';

    // make all items having class 'edit' editable
    $('.edit').editable();

    // make username1 editable
    $('#board-column-name').editable({
      type: 'text',
      pk: 1,
      url: '/post',
      title: 'Column Title'
    });

    // this is to automatically make the next item in the table editable
    $('.edit').on('save', function(e, params){
      var that = this;
      // persist the old value in the element to be restored when clicking reset
      var oldItemValue = $(that)[0].innerHTML;
      if (!$(that).attr('oldValue')) {
        console.log('persisting original value: ' + oldItemValue)
        $(that).attr('oldValue', oldItemValue);
      }
      setTimeout(function() {
        // first search the row
        var item = $(that).closest('td').next().find('.edit');
        console.log(item);
        if (item.length == 0) {
          // check the next row
          item = $(that).closest('tr').next().find('.edit');
        }
        item.editable('show');
      }, 200);
    });

    $('#tabList a').click(function (e) {
      e.preventDefault()
      $(this).tab('show')
    });

    $('#addColumnModal').on('shown.bs.modal', function (e) {
      //var button = $('#addColumnButton');
      var button = $(e.relatedTarget);
      console.log("e: ", e);
      //var boardId = button.data('boardid');
      console.log("button.data: ", button.data('boardid'));
      var boardId = button.data('boardid');
      console.log("boardId: " + boardId);
      var projectName = button.data('projectname');
      console.log("boardId: ",boardId, "projectName: ",projectName);
      $('.board-id-input').val(boardId);
      $('.project-name-input').val(projectName);
    });

    $('#addBoardModal').on('shown.bs.modal', function (e) {
      var button = $(e.relatedTarget);
      var projectName = button.data('project-name');
      console.log("button.data: ", button.data('project-name'));
      $('.project-name-input').val(projectName);
    });

    function populateEditCardModal(cardLink, cardId, columnId, projectName, callback) {
      $.ajax({
        type: "GET",
        url: "/cards/" + cardId,
        success: function(returnCard){
          console.log("cardId: ", cardId);
          console.log("Card: ", returnCard.data);
          card = JSON.parse(returnCard.data);
          console.log("editCardModal Found Card: ", card);
          console.log("cardName:", card['name']);
          console.log("typeof:", typeof(card));
          var cardName = card['name'];
          var cardDescription = card['description'];
          var cardCommentsHTML = "";

          console.log("Got success from populateEditCardModal!");

          if (typeof card.membership._comments != 'undefined') {
            card.membership._comments.forEach( function(comment) {
              console.log("Comment: ", comment);
              console.log("Comment._user: ", comment._user);
              cardCommentsHTML += "<div class=\"card-comment\"> \n"
                + "<a class=\"card-comment-user-link\" href=\"/users/" + comment._user._id + "\">" + comment._user.local.name + "</a>\n"
                + "<div class=\"card-comment-content-container\">\n"
                + "  <div class=\"card-comment-content\"><p class=\"card-comment-content-p\">" + comment.content + "</p></div>\n"
                + "  </div>\n"
                + "  <p class=\"comment-meta\"><span \"comment-meta-time\">10 minutes ago</span>\n"
                + "    <span> - <a class=\"comment-meta-edit\">edit</a> - <a data-comment-id=\"" + comment._id + "\" class=\"comment-meta-delete\">delete</a></span>\n"
                + "  </p>\n"
                + "</div>\n";
            });
          } else {
            cardCommentsHTML = "No comments...";
          };

          console.log("cardCommentsHTML: ", cardCommentsHTML);

          console.log("columnId: ",columnId,"projectName:",projectName,"cardId:",cardId,"cardName:",cardName,"cardDescription:",cardDescription);
          $('.editcard-column-id-input').val(columnId);
          $('.editcard-project-name-input').val(projectName);
          $('.editcard-card-id-input').val(cardId);
          $('.editcard-card-name-input').val(cardName);
          $('.editcard-card-description-input').val(cardDescription);
          $('.edit-card-comments').html(cardCommentsHTML);
          $('.edit-card-comment-input').val("");
          $('#name').focus();
          callback();
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
          callback(errorThrown);
        }
      });
      callback();
    };

    $('.add-comment-button').on('click', function(e) {
      var cardLink = $(e.relatedTarget);
      var cardId = cardLink.data('cardid');
      var columnId = cardLink.data('columnid');
      var projectName = cardLink.data('projectname');
      var card = {};
      console.log("addCommentButton - JS Hook fired");

      populateEditCardModal(cardLink, cardId, columnId, projectName, function(err) {
        if (err) {
          alert("ERROR: " + err);
          console.log("ERROR: " + err);
        } else {
          console.log("modal populated with new comments...");
        }
      });
    });

    $('.comment-meta-delete').click( function(e) {
      var cardLink = $(e.relatedTarget);
      var commentId = cardLink.data('commentId');
      var cardId = cardLink.data('cardid');
      var columnId = cardLink.data('columnid');
      var projectName = cardLink.data('projectname');
      var card = {};
      console.log("commentMetaDeleteLink - JS Hook fired");

      $.ajax({
        type: "GET",
        url: "/comments/delete/" + commentId,
        success: function(data){
          console.log("delete card returned: ", data);
          populateEditCardModal(cardLink, cardId, columnId, projectName, function(err) {
            if (err) {
              alert("ERROR: " + err);
              console.log("ERROR: " + err);
            } else {
              console.log("modal populated with new comments...");
            }
          });
        },
        error: function(XMLHttpRequest, textStatus, err) {
          console.log("comment-meta-delete: [ERROR]");
        }
      });

    });
    $('#editCardModal').on('show.bs.modal', function(e) {
      //var cardLink = $('#editCard');
      var cardLink = $(e.relatedTarget);
      var cardId = cardLink.data('cardid');
      var columnId = cardLink.data('columnid');
      var projectName = cardLink.data('projectname');
      var card = {};
      console.log("editCardModal - JS Hook fired");

      populateEditCardModal(cardLink, cardId, columnId, projectName, function(err) {
        if (err) {
          alert("ERROR: " + err);
          console.log("ERROR: " + err);
        } else {
          console.log("edit card modal populated...");
        }
      });

    });

    $('#addCardModal').on('shown.bs.modal', function(e) {
      //var cardLink = $('#editCard');
      var columnLink = $(e.relatedTarget);
      console.log("addCardModul - ", columnLink.data('column-id'));
      var columnId = columnLink.data('column-id');
      var card = {};
      $('.addcard-column-id-input').val(columnId);
      $('#name').focus();
    });

  </script>
<% include ../footer %>
