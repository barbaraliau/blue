<!-- views/projects/project.ejs -->
<html>
<head>
  <title>Blue Projects</title>
  <meta charset = "UTF-8" />
  <script type = "text/javascript" src = "/js/jquery-2.1.3.min.js"></script>
  <script type = "text/javascript" src = "/js/jquery-ui.js"></script>
  <script type = "text/javascript" src = "/js/bootstrap.min.js"></script>
  <script type = "text/javascript">
    $(init);
    function init(){
      $("#tabs").tabs();
    }
  </script>
</head>
<body>
<% include ../header %>
<% include ./boards/index %>

  <script src="/js/jquery.sortable.js"></script>
  <script>

    console.log("board-column > ul: ", $('.board-column > ul'));
    $(function() {
      if (typeof($('.board-column > ul')) !== 'undefined') {
        console.log("board-column > ul: ", $('.board-column > ul'));
        $('.board-column > ul').sortable({
          connectWith: '.connected',
          dropOnEmpty: true,
        });
      };
    });
    $('ul.sortable').sortable({
      dropOnEmpty: true,
      forcePlaceholderSize: true,
    });
    $('.sortable').sortable({
        items: 'li' ,
        forcePlaceholderSize: true,
        dropOnEmpty: true,
    //    placeholder : '<tr><td colspan="7">&nbsp;</td></tr>'
    });
    $('.sortable').sortable().bind('sortupdate', function(err, ui) {
      /*

      This event is triggered when the user stopped sorting and the DOM position has changed.

      ui.item contains the current dragged element.
      ui.item.index() contains the new index of the dragged element
      ui.oldindex contains the old index of the dragged element
      ui.startparent contains the element that the dragged item comes from
      ui.endparent contains the element that the dragged item was added to

      */
      //$.GET('/projects/action/moveCard', {cardId: card.cardId, boardName: board.name, columnName: ui.endparent}, function(data){
      console.log("UI: ", ui);
      console.log("parent node id (target column):" + ui.item[0].parentNode.id); // Where the card is moving to
      console.log("item id:" + ui.item[0].id);
      console.log("project: " + ui.item[0].childNodes[0].ownerDocument.title);
      //console.log("board name: ", $(this).closest('.row').find('.inputQty'));
      console.log("board name: ", $('li[role="tab"].ui-tabs-active a').text());
      console.log("ui.startparent: ", ui.startparent, " ui.endparent: ", ui.endparent);
      console.log("ui.item.index(): ", ui.item.index(), " ui.oldindex: ", ui.oldindex);
      //console.log("board: " + ui.item[0].parentNode.parentNode.parentNode.previousElementSibling.outerText);

      var order = $('ul.sortable li').map(function(){
          console.log($(this).data("id"));
          return $(this).data("id");
      }).get();

      // Should be a patch instead of post
      $.ajax({
        type: "POST",
        //url: "{{ URL::route('chapter.departmentSort', $chapter->slug) }}",
        url: "/card/move",
        dataType: "json",
        data: {cardId: ui.item[0].id, newColumnId: ui.item[0].parentNode.id, boardName: $('li[role="tab"].ui-tabs-active a').text()},
        success: function(order){
          console.log("Order: ", order);
        }
      });

      // make all items having class 'edit' editable
      $('.edit').editable();

      // make username1 editable
      $('#board-column-name').editable({
          type: 'text',
          pk: 1,
          url: '/post',
          title: 'Column Title'
      });

      //ajax emulation
      $.mockjax({
          url: '/post',
          responseTime: 200,
          response: function(settings) {
              console.log('done!');
          }
      });

      // this is to automatically make the next item in the table editable
      $('.edit').on('save', function(e, params){
          var that = this;
          // persist the old value in the element to be restored when clicking reset
          var oldItemValue = $(that)[0].innerHTML;
          if (!$(that).attr('oldValue')) {
              console.log('persisting original value: ' + oldItemValue)
            $(that).attr('oldValue', oldItemValue);
          }
          setTimeout(function() {
              // first search the row
              var item = $(that).closest('td').next().find('.edit');
              console.log(item);
              if (item.length == 0) {
                  // check the next row
                  item = $(that).closest('tr').next().find('.edit');
              }
              item.editable('show');
          }, 200);
      });

      $('#resetbtn').click(function() {
          $('.edit').each(function() {
              var o = $(this);
              o.editable('setValue', o.attr('oldValue'))  //clear values
               .editable('option', 'pk', o.attr('pk'))  //clear pk
               .removeClass('editable-unsaved')
             .removeAttr('oldValue');
          });
      });

      $('#savebtn').click(function() {
         $('.edit').editable('submit', {
             url: '/post',
             //ajaxOptions: { dataType: 'json' },
             success: function(data, config) {
                 $(this).removeClass('editable-unsaved') //remove unsaved class
                      .removeAttr('oldValue');  // clear oldValue
             },
             error: function(errors) {
                 console.log('error');
                 var msg = '';
                 if(errors && errors.responseText) { //ajax error, errors = xhr object
                     msg = errors.responseText;
                 } else { //validation error (client-side or server-side)
                     $.each(errors, function(k, v) { msg += k+": "+v+"<br>"; });
                 }
             }
         });
      });
    });
    // setting defaults for the editable
    $.fn.editable.defaults.mode = 'inline';
    $.fn.editable.defaults.showbuttons = false;
    $.fn.editable.defaults.url = '/post';
    $.fn.editable.defaults.type = 'text';

  </script>
<% include ../footer %>
