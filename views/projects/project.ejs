<!-- views/projects/project.ejs -->
<html>
<head>
  <title>Blue Projects</title>
  <meta charset = "UTF-8" />
  <script type = "text/javascript" src="/js/jquery-2.1.3.min.js"></script>
  <script type = "text/javascript" src="/js/jquery-ui.js"></script>
  <script type = "text/javascript" src="/js/bootstrap.min.js"></script>
  <script type = "text/javascript" src="/js/bootstrap-editable.min.js"></script>
</head>
<body>
<% include ../header %>
  <% include ./boards/index %>

  <script>

    //console.log("board-column > ul: ", $('.board-column > ul'));
    $(function() {
      if (typeof($('.board-column > ul')) !== 'undefined') {
        //console.log("board-column > ul: ", $('.board-column > ul'));
        console.log('in sort function');
        $('.board-column > ul').sortable({
          connectWith: '.connected',
          dropOnEmpty: true,
        });
      };
    });
    $('ul.sortable').sortable({
      dropOnEmpty: true,
      forcePlaceholderSize: true,
    });
    // Send update for column membership and order
    $(function() {
      $('.board-column > ul').each(function(idx) {
        console.log("Sort binding to '"+idx+"'");
        $(this).sortable({
          connectWith: ".connected",
          update: function () {
            var columnId = $('.board-column > ul')[idx].id;
            var cardOrder = $(this).sortable('toArray').toString();
            var newColumnId = $('.board-column > ul')[idx].parentNode.id;
            console.log("Card order ("+columnId+"): "+cardOrder);
            $.ajax({
              type: "POST",
              url: "/card/move",
              dataType: "json",
              data: {
                cardId: columnId,
                newColumnId: newColumnId,
                boardName: $('li[role="tab"].ui-tabs-active a').text(),
                cardOrder: cardOrder
              }
            }).then(function(order){
                console.log("Column update for "+$(this).text()+" done.");
              }
            );
          }
        }).disableSelection();
      });
    });
    // Send update for the moved cards membership
    $('.sortable').sortable().bind('sortupdate', function(err, ui) {
      console.log("SortUpsate Triggered");
      // Why do we need this if statement?
      console.log("this: "+this);
      console.log("$(this): "+$(this));
      if (this === ui.item.parent()[0]) {
        /*
          This event is triggered when the user stopped sorting and the DOM position has changed.
          ui.item contains the current dragged element.
          ui.item.index() contains the new index of the dragged element
          ui.oldindex contains the old index of the dragged element
          ui.startparent contains the element that the dragged item comes from
          ui.endparent contains the element that the dragged item was added to
        */
    //    console.log("UI: ", ui);
    //    console.log("parent node id (target column):" + ui.item[0].parentNode.id); // Where the card is moving to
    //    console.log("item id:" + ui.item[0].id);
    //    console.log("project: " + ui.item[0].childNodes[0].ownerDocument.title);
    //    //console.log("board name: ", $(this).closest('.row').find('.inputQty'));
    //    console.log("board name: ", $('li[role="tab"].ui-tabs-active a').text());
      };
    });

    // setting defaults for the editable
    $.fn.editable.defaults.mode = 'inline';
    $.fn.editable.defaults.showbuttons = false;
    $.fn.editable.defaults.url = '/post';
    $.fn.editable.defaults.type = 'text';

    // make all items having class 'edit' editable
    $('.edit').editable();

    // make board-column-name editable
    $('#board-column-name').editable({
      type: 'text',
      pk: 1,
      url: '/post',
      title: 'Column Title'
    });

    // this is to automatically make the next item in the table editable
    $('.edit').on('save', function(e, params){
      var that = this;
      // persist the old value in the element to be restored when clicking reset
      var oldItemValue = $(that)[0].innerHTML;
      if (!$(that).attr('oldValue')) {
        console.log('persisting original value: ' + oldItemValue)
        $(that).attr('oldValue', oldItemValue);
      }
      setTimeout(function() {
        // first search the row
        var item = $(that).closest('td').next().find('.edit');
        console.log(item);
        if (item.length == 0) {
          // check the next row
          item = $(that).closest('tr').next().find('.edit');
        }
        item.editable('show');
      }, 200);
    });

    $('#tabList a').click(function (e) {
      e.preventDefault()
      $(this).tab('show')
    });

    $('#addColumnModal').on('shown.bs.modal', function (e) {
      //var button = $('#addColumnButton');
      var button = $(e.relatedTarget);
      console.log("e: ", e);
      //var boardId = button.data('boardid');
      console.log("button.data: ", button.data('boardid'));
      var boardId = button.data('boardid');
      console.log("boardId: " + boardId);
      var projectName = button.data('projectname');
      console.log("boardId: ",boardId, "projectName: ",projectName);
      $('.board-id-input').val(boardId);
      $('.project-name-input').val(projectName);
    });

    $('#addBoardModal').on('shown.bs.modal', function (e) {
      var button = $(e.relatedTarget);
      var projectName = button.data('project-name');
      console.log("button.data: ", button.data('project-name'));
      $('.project-name-input').val(projectName);
    });

    function populateEditCardModal(cardId, columnId, callback) {
      $.ajax({
        type: "GET",
        url: "/cards/" + cardId
      }).then( function(returnCard){
        console.log("cardId: ", cardId);
        console.log("Card: ", returnCard.data);
        card = JSON.parse(returnCard.data);
        console.log("editCardModal Found Card: ", card);
        console.log("cardName:", card['name']);
        console.log("typeof:", typeof(card));
        var cardName = card['name'];
        var cardDescription = card['description'];
        var cardCommentsHTML = "";

        console.log("Got success from populateEditCardModal!");

        if (typeof card.membership._comments != 'undefined') {
          card.membership._comments.forEach( function(comment) {
            console.log("Comment: ", comment);
            console.log("Comment._user: ", comment._user);
            cardCommentsHTML += "<div class=\"card-comment\"> \n"
              + "<a class=\"card-comment-user-link\" href=\"/users/" + comment._user._id + "\">" + comment._user.local.name + "</a>\n"
              + "<div class=\"card-comment-content-container\">\n"
              + "  <div class=\"card-comment-content\"><p class=\"card-comment-content-p\">" + comment.content + "</p></div>\n"
              + "  </div>\n"
              + "  <p class=\"comment-meta\"><span \"comment-meta-time\">10 minutes ago</span>\n"
              + "    <span> - <a class=\"comment-meta-edit\">edit</a> - <a data-card-id=\"" + cardId + "\" data-column-id=\"" + columnId + "\" data-comment-id=\"" + comment._id + "\" class=\"comment-meta-delete\">delete</a></span>\n"
              + "  </p>\n"
              + "</div>\n";
          });
        } else {
          cardCommentsHTML = "No comments...";
        };

        console.log("cardCommentsHTML: ", cardCommentsHTML);

        console.log("columnId: ",columnId,"cardId:",cardId,"cardName:",cardName,"cardDescription:",cardDescription);
        $('.editcard-column-id-input').val(columnId);
        $('.editcard-card-id-input').val(cardId);
        $('.editcard-card-name-input').val(cardName);
        $('.editcard-card-description-input').val(cardDescription);
        $('.edit-card-comments').html(cardCommentsHTML);
        $('.edit-card-comment-input').val("");
        $('#name').focus();
        callback();
      });
    };

    $('.add-comment-form').on('submit', function(e) {
      event.preventDefault();
      var card = {};

      var $form = $( this ),
        cardId = $form.find("input[name='comment-cardId']").val(),
        columnId = $form.find("input[name='comment-columnId']").val(),
        comment = $form.find("input[name='comment']").val();

      console.log("addCommentButton - JS Hook fired");

      $.post("/comments", { cardId: cardId, comment: comment })
      .done( function( data ) {
        console.log("Data returned from add comment: ", data);
        populateEditCardModal(cardId, columnId, function(err) {
          if (err) {
            alert("ERROR: " + err);
            console.log("ERROR: " + err);
          } else {
            console.log("modal populated with new comments...");
          }
        });
      })
    });

    // This is to catch the click on the delete comment link
    $('.edit-card-comments').on('click', function(e) {
      var cardLink = $(e.target);
      if (!cardLink.hasClass('comment-meta-delete')) {
        console.log("clicked a comment link that is not the delete button");
        return;
      };
      var commentId = cardLink.data('comment-id');
      var cardId = cardLink.data('card-id');
      var columnId = cardLink.data('column-id');
      var card = {};
      console.log("commentMetaDeleteLink - JS Hook fired");

      $.ajax({
        type: "GET",
        url: "/comments/delete/" + commentId
      }).then( function(data){
        console.log("delete card returned: ", data);
        console.log("commentId: " + commentId + " cardId: " + cardId + " columnId: " + columnId);
        populateEditCardModal(cardId, columnId, function(err) {
          if (err) {
            alert("ERROR: " + err);
            console.log("ERROR: " + err);
          } else {
            console.log("modal populated with new comments...");
          }
        });
      });
    });

    $('#editCardModal').on('show.bs.modal', function(e) {
      //var cardLink = $('#editCard');
      var cardLink = $(e.relatedTarget);
      var cardId = cardLink.data('cardid');
      var columnId = cardLink.data('columnid');
      var card = {};
      console.log("editCardModal - JS Hook fired");

      populateEditCardModal(cardId, columnId, function(err) {
        if (err) {
          alert("ERROR: " + err);
          console.log("ERROR: " + err);
        } else {
          console.log("edit card modal populated...");
        }
      });

    });

    $('#addCardModal').on('shown.bs.modal', function(e) {
      var columnLink = $(e.relatedTarget);
      console.log("addCardModul - ", columnLink.data('column-id'));
      var columnId = columnLink.data('column-id');
      var card = {};
      $('.addcard-column-id-input').val(columnId);
      $('#name').focus();
    });

  </script>
<% include ../footer %>
